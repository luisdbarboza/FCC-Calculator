{"version":3,"sources":["calculator.js","Context/CalculatorContext.js","Components/Display/Display.js","Components/Button/Button.js","Components/InputPanel/InputPanel.js","Components/Calculator/Calculator.js","App.js","index.js"],"names":["checkPrecedence","symbol","precedence","key","calculator","expression","postfixExpression","stack","postFixExpressionQueue","i","length","test","push","Number","shift","operation","rightOperand","pop","leftOperand","result","evaluate","expressionArr","match","stackOfSymbols","postFixQueue","includes","currentPop","endIndex","indexOf","currentSymbolPrecedence","headOfStackPrecedence","infixToPostfix","CalculatorContext","createContext","CalculatorContextProvider","props","useState","display","setDisplay","newCalculation","setNewCalculation","Provider","value","changeDisplay","displayText","lastInput","forEach","withoutLeadingZeroes","slice","replace","removeLeadingZeroes","calculate","sanitized","matches","sanitize","children","Display","useContext","id","Button","side","className","onClick","numpad","operations","leftButtons","Object","keys","map","index","rightButtons","NumPad","Operations","InputPanel","Calculator","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.048f31fe.chunk.js","sourcesContent":["const checkPrecedence = (symbol) => {\n\n  const precedence = {'^': 3, '/': 2, 'x': 2, '+': 1, '-': 1};\n  for (let key in precedence) {\n    if (key === symbol)\n      return precedence[key];\n  }\n  return 0;\n}\n\n\nconst infixToPostfix = (expression) => {\n  //Separa los numeros de los simbolos\n  let expressionArr = expression.match(/((\\d+)?[.](\\d+))|(\\d+)|(^[-]?(\\d+)?[.](\\d+))|(^[-]?(\\d+))|([\\\\(]|[\\\\)]|[\\^]|[x]|[\\/]|[+]|[-])/g);\n  expression = [...expressionArr];\n  const symbols = '^()/x+-';\n  const stackOfSymbols = [];\n  const postFixQueue = [];\n\n  for (let i = 0; i < expression.length; i++) {\n    let isANumber = /(\\d+)/.test(expression[i]);\n\n    //checks if expression[i] is an number\n    if (isANumber) {\n      postFixQueue.push(expressionArr.shift());\n    } else if (symbols.includes(expression[i])) {\n      let symbol = expressionArr.shift();\n      switch (symbol) {\n        case '(': {\n          stackOfSymbols.push(symbol);\n        } break;\n        case ')': {\n          let currentPop = stackOfSymbols.length - 1;\n          let endIndex = stackOfSymbols.indexOf('(');\n\n          for (currentPop; currentPop > endIndex; currentPop--) {\n            postFixQueue.push(stackOfSymbols.pop());\n          }\n\n          stackOfSymbols.pop();\n        } break;\n        default: {\n          let currentSymbolPrecedence = checkPrecedence(symbol);\n          let headOfStackPrecedence = checkPrecedence(stackOfSymbols[stackOfSymbols.length - 1]);\n\n          if (currentSymbolPrecedence > headOfStackPrecedence) {\n            stackOfSymbols.push(symbol);\n          } else if (currentSymbolPrecedence < headOfStackPrecedence) {\n            while (currentSymbolPrecedence < headOfStackPrecedence) {\n              postFixQueue.push(stackOfSymbols.pop());\n              currentSymbolPrecedence = checkPrecedence(symbol);\n              headOfStackPrecedence = checkPrecedence(stackOfSymbols[stackOfSymbols.length - 1]);\n            }\n\n            stackOfSymbols.push(symbol);\n          } else {\n            postFixQueue.push(stackOfSymbols.pop());\n            stackOfSymbols.push(symbol);\n          }\n        }\n      }\n    }\n\n  }\n\n  while (stackOfSymbols.length > 0) {\n    postFixQueue.push(stackOfSymbols.pop());\n  }\n\n\n  return postFixQueue;\n}\n\nconst evaluate = (postfixExpression) => {\n  let stack = [];\n  let postFixExpressionQueue = [...postfixExpression];\n\n  for (let i = 0; i < postfixExpression.length; i++) {\n    if (/([-]\\d+)|(\\d+)/.test(postfixExpression[i])) {\n      stack.push(Number(postFixExpressionQueue.shift()));\n    } else {\n      let operation = postFixExpressionQueue.shift();\n      let rightOperand = Number(stack.pop());\n      let leftOperand = Number(stack.pop());\n      let result;\n\n      switch (operation) {\n        case 'x': {\n          result = leftOperand * rightOperand;\n          stack.push(result);\n        } break;\n        case '/': {\n          result = leftOperand / rightOperand;\n          stack.push(result);\n        } break;\n        case '+': {\n          result = leftOperand + rightOperand;\n          stack.push(result);\n        } break;\n        case '-': {\n          result = leftOperand - rightOperand;\n          stack.push(result);\n        } break;\n      }\n    }\n  }\n\n  return stack[0];\n}\n\nconst calculator = (expression) => {\n  const postfixVersion = infixToPostfix(expression);\n  return evaluate(postfixVersion);\n}\n\nexport default calculator;\n","import React, {createContext, useState} from 'react';\nimport calculator from '../calculator';\n\nexport const CalculatorContext = createContext();\n\nconst CalculatorContextProvider = (props) => {\n  const [display, setDisplay] = useState('0');\n  const [newCalculation, setNewCalculation] = useState(true);\n\n  const sanitize = (display) => {\n    let regex = /[\\^x\\/+-]{1,}/g;\n    let matches = display.match(regex);\n\n    if (matches) {\n      matches.forEach(match => {\n        if (match.length >= 2)\n          display = display.replace(match, match[match.length - 1])\n      });\n    }\n\n    return display;\n  }\n\n  const calculate = () => {\n    let sanitized = sanitize(display);\n    //console.log(sanitized, \"sanitized\");\n    const result = calculator(sanitized);\n    //console.log(result, \"calculator\");\n    setDisplay(result);\n    setNewCalculation(true);\n  }\n\n  const removeLeadingZeroes = (displayText) => {\n    if (/(0{1,}\\d+)/g.test(displayText)) {\n      let matches = displayText.match(/(0{1,}\\d+)/g);\n      matches.forEach(match => {\n        let matchIndex = displayText.indexOf(match);\n        let withoutLeadingZeroes = '';\n\n        for (let i = matchIndex; i < displayText.length; i++) {\n          if (displayText[i] === \"0\")\n            continue;\n          else {\n            withoutLeadingZeroes += displayText.slice(i,);\n            break;\n          }\n        }\n\n        displayText = displayText.replace(match, withoutLeadingZeroes);\n\n        displayText = displayText !== '' ? displayText : '0';\n      });\n    }\n\n    return displayText;\n  }\n\n  const changeDisplay = (displayText) => {\n    displayText = removeLeadingZeroes(displayText);\n    let lastInput = displayText[displayText.length - 1];\n\n    if (newCalculation) {\n      setDisplay(lastInput);\n      setNewCalculation(false);\n    }\n\n    if ((lastInput !== '=' && !newCalculation) && lastInput !== 'C')\n      setDisplay(displayText);\n    else if (lastInput === 'C') {\n      setDisplay('0');\n      setNewCalculation(true);\n    }\n  }\n\n  return (\n    <CalculatorContext.Provider value={{display, changeDisplay, calculate}}>\n      {props.children}\n    </CalculatorContext.Provider>\n  )\n\n}\n\nexport default CalculatorContextProvider;\n","import React, {useContext} from 'react';\nimport {CalculatorContext} from '../../Context/CalculatorContext';\nimport './Display.css';\n\nconst Display = () => {\n  const {display} = useContext(CalculatorContext);\n\n  return (\n    <div id=\"display\">\n      <h2>{display}</h2>\n    </div>\n  )\n}\n\nexport default Display;\n","import React, {useContext} from 'react';\nimport './Button.css';\nimport {CalculatorContext} from '../../Context/CalculatorContext';\n\nconst Button = ({id, value, side}) => {\n  const {display, changeDisplay, calculate} = useContext(CalculatorContext);\n\n  return (\n    <>\n      {side === \"left\"\n        ?\n        <div\n          id={`${id}`}\n          className=\"numpad-left-button\"\n          onClick={() => {\n            if (value !== '=') {\n              changeDisplay(display + value);\n            }\n            else if (display.length > 1)\n              calculate();\n          }}\n        >\n          {value}\n        </div >\n        :\n        <div\n          id={`${id}`}\n          className=\"numpad-right-button\"\n          onClick={() => changeDisplay(display + value)}\n        >\n          {value}\n        </div>\n      }\n    </>\n  );\n}\n\nexport default Button;\n","import React from 'react';\nimport './InputPanel.css';\nimport Button from '../Button/Button';\n\nconst numpad = {\n  'one': '1',\n  'two': '2',\n  'three': '3',\n  'four': '4',\n  'five': '5',\n  'six': '6',\n  'seven': '7',\n  'eight': '8',\n  'nine': '9',\n  'decimal': '.',\n  'zero': '0',\n  'equals': '='\n}\n\nconst operations = {\n  'clear': 'C',\n  'add': '+',\n  'subtract': '-',\n  'multiply': 'x',\n  'divide': '/'\n}\n\nconst leftButtons = Object.keys(numpad).map((id, index) => {\n\n  return (\n    <Button\n      key={index}\n      id={id}\n      value={numpad[id]}\n      side=\"left\"\n    />\n  )\n});\n\nconst rightButtons = Object.keys(operations).map((id, index) => {\n  return <Button key={index} id={id} value={operations[id]} side=\"right\" />\n});\n\n\n//Numbers, decimal dot, equal sign\nconst NumPad = () => {\n  return (\n    <div id=\"numpad\">\n      {leftButtons}\n    </div>\n  )\n}\n\n//aritmethic operations and clear button\nconst Operations = () => {\n  return (\n    <div id=\"operations\">\n      {rightButtons}\n    </div>\n  );\n}\n\nconst InputPanel = () => {\n  return (\n    <div id=\"input-panel\">\n      <NumPad />\n      <Operations />\n    </div>\n  )\n}\n\nexport default InputPanel;\n","import React from 'react';\nimport Display from '../Display/Display';\nimport InputPanel from '../InputPanel/InputPanel';\nimport './Calculator.css';\n\nconst Calculator = () => {\n  return (\n    <div id=\"calculator\">\n      <Display />\n      <InputPanel />\n    </div>\n  );\n}\n\nexport default Calculator;\n","import React from 'react';\nimport './App.css';\nimport Calculator from './Components/Calculator/Calculator';\nimport CalculatorContextProvider from './Context/CalculatorContext';\n\nconst App = () => {\n  return (\n    <div id=\"wrapper\">\n      <CalculatorContextProvider >\n        <Calculator />\n      </CalculatorContextProvider>\n    </div>\n  )\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from './App.js';\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}